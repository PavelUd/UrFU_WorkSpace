
<head>
  <title>Загрузка нескольких фотографий</title>
</head>
<body>
<form id="baseForm" action="/1/workspace-create" method="post" enctype="multipart/form-data">
  <div>
    <input type="text" name="name">
  </div>
  <div>
    <input type="text" name="description">
  </div>
  <div>
    <input type="text" name="address">
  </div>
  <div>
    <input type="text" name="institute">
  </div>
  <select name = "idTemplate">Удобства
  @foreach (var amenity in ViewBag.Amenities)
  {
    <option value="@amenity.Id">@amenity.Name</option>
  }
  </select>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name="mondayStart">
    <input type="time"  multiple name="mondayEnd">
  </div>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name="tuesdayStart">
    <input type="time" name="tuesdayEnd">
  </div>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name="wednesdayStart">
    <input type="time" name="wednesdayEnd">
  </div>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name = "thursdayStart">
    <input type="time" name = "thursdayEnd">
  </div>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name ="fridayStart">
    <input type="time" name = "fridayEnd">
  </div>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name = "saturdayStart">
    <input type="time" name = "saturdayEnd">
  </div>
  <div style="display: flex; flex-wrap: wrap">
    <input style="margin-right: 1rem" type="time" name = "sundayStart">
    <input type="time" name = "sundayEnd">
  </div>
  <div>
    <input type="file"  name="uploads"/>
  </div>
  <div>
    <input hidden="" id="objects" name="objects"/>
  </div>
  
  <button id = "submit-button">Сохранить</button>
</form>

<div id="myCreateDiagram" style="width:500px; height:300px; background: #565e64; align-self: center"></div>
<div id = "myPaletteDiv" style="width:100%; height:400px"></div>
<script>
    function init() {
    const $ = go.GraphObject.make;
        
            diagram =
              new go.Diagram("myCreateDiagram",
                {
                  fixedBounds: new go.Rect(0, 0, 500, 300),  
                  allowHorizontalScroll: false, 
                  allowVerticalScroll: false,
                  allowZoom: true,
                  "animationManager.isEnabled": false,
                  "undoManager.isEnabled": true,
                  "Changed": function(e) {
                          ff();
                  }
              
                });
    diagram.add(
              $(go.Part,
                { layerName: "Grid", position: diagram.fixedBounds.position },
              ));
    diagram.allowLink = false;
    diagram.nodeTemplate = $(go.Node,
                                       'Auto',
                                       {
                                           selectionAdorned: false
                                       },
                                       new go.Binding('desiredSize', 'size', go.Size.parse),
                                       new go.Binding('position', 'pos', go.Point.parse).makeTwoWay(go.Point.stringify),
                                       new go.Binding('layerName', 'isSelected', (s) => (s ? 'Foreground' : '')).ofObject(),
                           
                                       $(go.Picture,
                                           'Rectangle',
                                           {
                                               name: "SHAPE",
                                               stretch: go.GraphObject.Fill, filter: ''
                                           },
                                           new go.Binding('source', 'image'),
                                           new go.Binding('bn', 'color'),
                                           new go.Binding('category', 'category'),
                                           new go.Binding('fill', 'color'),
                                       )
                                   );
    
    diagram.undoManager.isEnabled = true;
    
    var myPalette =
      new go.Palette("myPaletteDiv");
    
    // the Palette's node template is different from the main Diagram's
    myPalette.nodeDetail =
      $(go.Node, "Horizontal",
        $(go.Shape,
          { maxSize: new go.Size(100, 100), fill: "white" },
          new go.Binding("fill", "color")),
        $(go.TextBlock,
          new go.Binding("text", "color"))
      );
   myPalette.model.nodeDataArray =  gh(@Json.Serialize(ViewBag.Objects))
  }
    
    window.addEventListener('DOMContentLoaded', init);
          let date = [];
const ff = () =>{
  const myDiagram = go.Diagram.fromDiv(document.getElementById('myCreateDiagram'))
  let modelData = JSON.parse(myDiagram.model.toJson());
  
  modelData.nodeDataArray.forEach(node => {
    const location = myDiagram.findNodeForKey(node.key).location;
    node.loc = `${location.x} ${location.y}`;
  });
  modelData = modelData["nodeDataArray"];
  let json = JSON.stringify(modelData);
  document.getElementById('objects').value = json;
  }
  
  function gh(array){
    let g = [];
    array.forEach(x => {
      g.push({key:0, idTemplate: x.id, color: "", size: "100 100", category: x.category, image: x.picture });
      });
    return g;
  }

 
</script>
</body>

