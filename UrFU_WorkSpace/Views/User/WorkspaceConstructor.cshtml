<form action="/workspace-create" method="post" enctype="multipart/form-data">
  <ul class="list-reset constructor__list">
    <div>
      <span class="grey">
        Добавить обложку
      </span>
      <span class="grey">
        Добавить фото
      </span>
    </div>
    <div class="constructor-images-wrap">
      <div class="constructor-cover-wrap">
        <label for="constructor-cover" class="constructor-file"><img src="~/img/plus.png" alt="plus" class="plus" style="object-fit: cover;"></label>
        <input class="constructor__input" type="file" id="constructor-cover" name="uploads" >
      </div>

      <div class="constructor-additional-images">
        <div class="additional-img">
          <label for="constructor-add-img-1" class="constructor-file"><img src="~/img/plus.png" alt="plus" class="plus"></label>
          <input class="constructor__input" type="file" id="constructor-add-img-1" name="uploads" >
        </div>
        <div class="additional-img">
          <label for="constructor-add-img-2" class="constructor-file"><img src="~/img/plus.png" alt="plus" class="plus"></label>
          <input class="constructor__input" type="file" id="constructor-add-img-2" name="uploads" >
        </div>
        <div class="additional-img">
          <label for="constructor-add-img-3" class="constructor-file"><img src="~/img/plus.png" alt="plus" class="plus"></label>
          <input class="constructor__input" type="file" id="constructor-add-img-3" name="uploads" >
        </div>
        <div class="additional-img">
          <label for="constructor-add-img-4" class="constructor-file"><img src="~/img/plus.png" alt="plus" class="plus"></label>
          <input class="constructor__input" type="file" id="constructor-add-img-4" name="uploads" >
        </div>
      </div>
    </div>

    <li class="constructor__elem">
      <label class="constructor-label" for="constructor-name">Название</label>
      <input class="constructor__input" type="text" id="constructor-name" name="name" placeholder="Добавить название"  required>
    </li>

    <li class="constructor__elem">
      <label class="constructor-label" for="constructor-description">Описание</label>
      <input class="constructor__input" type="text" id="constructor-description" name="description" placeholder="Добавить описание" required="">
    </li>

    <li class="constructor__elem">
      <label class="constructor-label" for="constructor-address">Адрес</label>
      <input class="constructor__input" type="text" id="constructor-address" name="address" placeholder="Добавить адрес"  required>
    </li>

    <li class="constructor__elem">
      <label class="constructor-label" for="constructor-institute">Институт</label>
      <select class="constructor__input" name="institute" id="constructor-institute" placeholder="Выбрать адрес"  required>
        <option value="" selected>Выберите институт</option>
        <option value="УГИ">Уральский гуманитарный институт</option>
        <option value="УЭИУ">Институт экономики и управления</option>
        <option value="ИЕНИМ">Институт естественных наук и математики</option>
        <option value="Ирит-РТФ">Институт радиоэлектроники и информационных технологий–РтФ</option>
        <option value="ХТИ">Химико-технологический институт</option>
        <option value="ФТИ">Физико-технологический институт</option>
        <option value="УЭИ">Уральский энергетический институт</option>
      </select>
    </li>

    <div class="days__wrap">
      <span class="day__about">Режим работы</span>
      <span class="day__about">Время начала</span>
      <span class="day__about">Время конца</span>
    </div>

    <ul class="list-reset days__list">
      <li class="day__elem">
        <div class="constructor__day">
          <span class="day__name">Понедельник</span>
          <input class="form-control time__start" type="time" name="mondayStart" id="">
          <input class="form-control" type="time" name="mondayEnd" id="">
        </div>
      </li>
      <li class="day__elem">
        <div class="constructor__day">
          <div class="day__name">Вторник</div>
          <input class="form-control time__start" type="time" name="thursdayStart" id="">
          <input class="form-control" type="time" name="thursdayEnd" id="">
        </div>
      </li>
      <li class="day__elem">
        <div class="constructor__day">
          <span class="day__name">Среда</span>
          <input class="time__start form-control" type="time" name="wednesdayStart" id="">
          <input class="form-control" type="time" name="wednesdayEnd" id="">
        </div>
      </li>
      <li class="day__elem">
        <div class="constructor__day">
          <span class="day__name">Четверг</span>
          <input class="form-control time__start" type="time" name="tuesdayStart" id="">
          <input class="form-control" type="time" name="tuesdayEnd" id="">
        </div>
      </li>
      <li class="day__elem">
        <div class="constructor__day">
          <span class="day__name">Пятница</span>
          <input class="form-control time__start" type="time" name="fridayStart" id="">
          <input class="form-control" type="time" name="fridayEnd" id="">
        </div>
      </li>
      <li class="day__elem">
        <div class="constructor__day">
          <span class="day__name">Суббота</span>
          <input class="form-control time__start" type="time" name="saturdayStart" id="">
          <input class="form-control" type="time" name="saturdayEnd" id="">
        </div>
      </li>
      <li class="day__elem">
        <div class="constructor__day">
          <span class="day__name">Воскресенье</span>
          <input class="form-control time__start" type="time" name="sundayStart" id="">
          <input class="form-control" type="time" name="" id="sundayEnd">
        </div>
      </li>
    </ul>

    <span class="grey">
      Удобства коворкинга
    </span>
    <div>
      <input type="text" id="templates" name="idTemplate" value="[]" hidden>
      <ul class="list-reset constructor-comfort-list"></ul>
    </div>

    <div class="constructor__redactor">
      <div>
        <input hidden="" id="objects" name="objects"/>
      </div>
      <span class="redactor__title">
        Редактор помещения
      </span>
      <div style="border-radius: 10px; background: lightgray; border:2px solid black;margin-bottom:1rem;padding: 20px; ">
        <div id="myCreateDiagram" style="width:500px; height:300px; background: white;margin: auto; border:2px solid black"></div>
      </div>
      <div id = "myPaletteDiv" style="width:100%; height:50px"></div>
    </div>
  </ul>
  <button class="btn btn-reset" style="margin: auto; padding: 5px 30px 5px 30px">Создать коворкинг</button>
</form>
<script>
    function initDiagram(objects) {
    const $ = go.GraphObject.make;
        
            diagram =
              new go.Diagram("myCreateDiagram",
                {
                  fixedBounds: new go.Rect(0, 0, 500, 300),
                  contentAlignment: go.Spot.Center,  
                  allowHorizontalScroll: false, 
                  allowVerticalScroll: false,
                  allowZoom: true,
                  "animationManager.isEnabled": false,
                  "undoManager.isEnabled": true,
                  "Changed": function(e) {
                          ff();
                  }
              
                });
    diagram.add(
              $(go.Part,
                { layerName: "Grid", position: diagram.fixedBounds.position },
              ));
    diagram.allowLink = false;
    diagram.nodeTemplate = $(go.Node,
                                       'Auto',
                                       {
                                           selectionAdorned: false
                                       },
                                       new go.Binding('desiredSize', 'size', go.Size.parse),
                                       new go.Binding('position', 'pos', go.Point.parse).makeTwoWay(go.Point.stringify),
                                       new go.Binding('layerName', 'isSelected', (s) => (s ? 'Foreground' : '')).ofObject(),
                           
                                       $(go.Picture,
                                           'Rectangle',
                                           {
                                               name: "SHAPE",
                                               stretch: go.GraphObject.Fill, filter: ''
                                           },
                                           new go.Binding('source', 'image'),
                                           new go.Binding('bn', 'color'),
                                           new go.Binding('category', 'category'),
                                           new go.Binding('fill', 'color'),
                                       )
                                   );
    
    diagram.undoManager.isEnabled = true;
    
    var myPalette =
      new go.Palette("myPaletteDiv");
    
      myPalette.nodeTemplate = $(go.Node, "Auto",
                                      {
                                        cursor: "pointer", 
                                        selectionAdorned: false
                                      },
                                     $(go.Shape, "RoundedRectangle",
                                       { fill: "lightgray", stroke: null, width: go.GraphObject.Auto, height: 37, parameter1: 5}),
                                     $(go.TextBlock,  
                                       { font: "bold 14px sans-serif", stroke: "white", textAlign: "center",margin: 5  },
                                       new go.Binding("text", "category")
                                     )
                                   );
      myPalette.model.nodeDataArray =  gh(objects)
  }
const ff = () =>{
  const myDiagram = go.Diagram.fromDiv(document.getElementById('myCreateDiagram'))
  let modelData = JSON.parse(myDiagram.model.toJson());
  
  modelData.nodeDataArray.forEach(node => {
    const location = myDiagram.findNodeForKey(node.key).location;
    node.loc = `${location.x} ${location.y}`;
  });
  modelData = modelData["nodeDataArray"];
  let json = JSON.stringify(modelData);
  document.getElementById('objects').value = json;
  }
  
  function gh(array){
    let g = [];
    array.forEach(x => {
      g.push({key:0, idTemplate: x.Id, color: "", size: "100 100", category: x.Category, image: x.Picture });
      });
    return g;
  }
 
function makeAmenitiesElements(amenities){
      
  let container = document.querySelector('.constructor-comfort-list');
  
  amenities.forEach(x => {
    container.innerHTML += `<li data-id="${x.Id}"><div class="constructor-comfort__elem" data-id="${x.Id}">
                                            <img src="${x.Picture}" alt="Wi-Fi" class="constructor-comfort__img">
                                            <span class="constructor-comfort__text">${x.Name}
                                            </span>
                                          </div></li>`
    });
  
  document.querySelectorAll('.constructor-comfort__elem').forEach(element =>   
    element.addEventListener('click', amenityHandler));
  }
function getTemplates() {
  
  
  $.get("/constructor-templates").then(x =>{
    let elems = JSON.parse(x);
     initDiagram(elems.objects);
   makeAmenitiesElements(elems.amenities);
  });
}
 </script>
<script>
const viewPhotoInContainer = (evt) => {
  const previewContainer =evt.target.parentNode; 
  const file = evt.target.files[0];
  const reader = new FileReader();
  reader.onload = (event) => {
    const img = previewContainer.querySelector('img');
     if (img.classList.contains('plus')){
        img.classList.replace('plus', 'photo')
        }
    img.src = event.target.result;
    img.alt = 'Preview';
  };

  if (file) {
    reader.readAsDataURL(file);
  }
};

let amenitiesContainer = document.getElementById("templates")

function amenityHandler(evt){
  const node = evt.target.parentNode;
  node.querySelector('.constructor-comfort__img').classList.toggle('active');
  node.querySelector('.constructor-comfort__text').classList.toggle('active');
  let array = JSON.parse(amenitiesContainer.value)
  if (!array.find(element => element === node.dataset.id)){
    array.push(node.dataset.id)
    }
  else{
     array = array.filter(function(value) {
      return value !== node.dataset.id;
    });
  }
  amenitiesContainer.value = JSON.stringify(array);
  console.log(amenitiesContainer.value);
  }
  
document.getElementById('constructorModal').addEventListener('shown.bs.modal', getTemplates)
document.getElementById('constructor-cover').addEventListener('change',  viewPhotoInContainer);
document.getElementById('constructor-add-img-1').addEventListener('change',  viewPhotoInContainer);
document.getElementById('constructor-add-img-2').addEventListener('change',  viewPhotoInContainer);
document.getElementById('constructor-add-img-3').addEventListener('change',  viewPhotoInContainer);
 document.getElementById('constructor-add-img-4').addEventListener('change',  viewPhotoInContainer);
</script>

